name: "splunk-integration"

services:
  events-generator:
    image: cyb3rhq/indexer-events-generator
    build:
      context: ../tools/events-generator
    depends_on:
      cyb3rhq.indexer:
        condition: service_healthy
    command: bash -c "python run.py -a cyb3rhq.indexer"

  cyb3rhq.indexer:
    image: opensearchproject/opensearch:${CYB3RHQ_INDEXER_VERSION}
    depends_on:
      cyb3rhq-certs-generator:
        condition: service_completed_successfully
    hostname: cyb3rhq.indexer
    ports:
      - 9200:9200
    environment:
      - CYB3RHQ_INDEXER_VERSION=${CYB3RHQ_INDEXER_VERSION}
      - node.name=cyb3rhq.indexer
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - plugins.security.ssl.http.enabled=true
      - plugins.security.allow_default_init_securityindex=true
      - plugins.security.ssl.http.pemcert_filepath=/usr/share/opensearch/config/cyb3rhq.indexer.pem
      - plugins.security.ssl.transport.pemcert_filepath=/usr/share/opensearch/config/cyb3rhq.indexer.pem
      - plugins.security.ssl.http.pemkey_filepath=/usr/share/opensearch/config/cyb3rhq.indexer-key.pem
      - plugins.security.ssl.transport.pemkey_filepath=/usr/share/opensearch/config/cyb3rhq.indexer-key.pem
      - plugins.security.ssl.http.pemtrustedcas_filepath=/usr/share/opensearch/config/root-ca.pem
      - plugins.security.ssl.transport.pemtrustedcas_filepath=/usr/share/opensearch/config/root-ca.pem
      - plugins.security.authcz.admin_dn="CN=cyb3rhq.indexer,OU=Cyb3rhq,O=Cyb3rhq,L=California, C=US"
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: curl -sku admin:admin https://localhost:9200/_cat/health | grep -q docker-cluster
      start_period: 10s
      start_interval: 3s
    volumes:
      - data:/usr/share/opensearch/data
      - ./certs/cyb3rhq.indexer.pem:/usr/share/opensearch/config/cyb3rhq.indexer.pem
      - ./certs/cyb3rhq.indexer-key.pem:/usr/share/opensearch/config/cyb3rhq.indexer-key.pem
      - ./certs/root-ca.pem:/usr/share/opensearch/config/root-ca.pem

  cyb3rhq.dashboard:
    image: opensearchproject/opensearch-dashboards:${CYB3RHQ_DASHBOARD_VERSION}
    depends_on:
      - cyb3rhq.indexer
    hostname: cyb3rhq.dashboard
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    volumes:
      - ./certs/:/usr/share/opensearch-dashboards/config/certs/
      - ./certs/cyb3rhq.dashboard-key.pem:/usr/share/opensearch-dashboards/config/certs/opensearch.key
      - ./certs/cyb3rhq.dashboard.pem:/usr/share/opensearch-dashboards/config/certs/opensearch.pem
      - ./certs/root-ca.pem:/usr/share/opensearch-dashboards/config/certs/root-ca.pem
    environment:
      CYB3RHQ_DASHBOARD_VERSION: ${CYB3RHQ_DASHBOARD_VERSION}
      OPENSEARCH_HOSTS: '["https://cyb3rhq.indexer:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: "/usr/share/opensearch-dashboards/config/certs/opensearch.key"
      SERVER_SSL_CERTIFICATE: "/usr/share/opensearch-dashboards/config/certs/opensearch.pem"
      OPENSEARCH_SSL_CERTIFICATEAUTHORITIES: "/usr/share/opensearch-dashboards/config/certs/root-ca.pem"

  generate-certs-config:
    image: alpine:latest
    volumes:
      - ./config:/config
    command: |
      sh -c "
      echo '
      nodes:
        indexer:
          - name: cyb3rhq.indexer
            ip: \"cyb3rhq.indexer\"
        server:
          - name: cyb3rhq.manager
            ip: \"cyb3rhq.manager\"
        dashboard:
          - name: cyb3rhq.dashboard
            ip: \"cyb3rhq.dashboard\"
      ' > /config/certs.yml
      "

  cyb3rhq-certs-generator:
    image: cyb3rhq/cyb3rhq-certs-generator:${CYB3RHQ_CERTS_GENERATOR_VERSION}
    hostname: cyb3rhq-certs-generator
    environment:
      - CYB3RHQ_CERTS_GENERATOR_VERSION=${CYB3RHQ_CERTS_GENERATOR_VERSION}
    depends_on:
      generate-certs-config:
        condition: service_completed_successfully
    entrypoint: sh -c "/entrypoint.sh; chown -R 1000:999 /certificates; chmod 740 /certificates; chmod 440 /certificates/*"
    volumes:
      - ./certs/:/certificates/
      - ./config/certs.yml:/config/certs.yml

  # =================================
  # Splunk and Logstash
  # =================================

  generator:
    image: cfssl/cfssl
    depends_on:
      cyb3rhq-certs-generator:
        condition: service_completed_successfully
    volumes:
      - ./certs/:/certs/
      - ../splunk/cfssl/:/conf/
    entrypoint: /bin/bash
    command: >
      -c '
        cd /certs
      	cat /conf/host.json | \
      	cfssl gencert \
      		-ca root-ca.pem \
      		-ca-key root-ca.key \
      		-config /conf/cfssl.json \
      		-profile=server - | \
      	cfssljson -bare splunk
      	openssl pkcs8 -topk8 -inform pem -in splunk-key.pem -outform pem -nocrypt -out splunk.key
        rm splunk.csr
        cat splunk.pem splunk-key.pem root-ca.pem > splunkhec.pem
        chown -R 1000:1000 /certs/splunk*
      '

  splunk:
    image: splunk/splunk:${SPLUNK_VERSION}
    volumes:
      - ./certs/splunk.key:/opt/splunk/etc/auth/custom/splunk.key
      - ./certs/splunk.pem:/opt/splunk/etc/auth/custom/splunk.pem
      - ./certs/splunkhec.pem:/opt/splunk/etc/auth/custom/splunkhec.pem
      - ../splunk/config/indexes.conf:/opt/splunk/etc/system/local/indexes.conf
      - ../splunk/config/default.yml:/tmp/defaults/default.yml
    depends_on:
      cyb3rhq-certs-generator:
        condition: service_completed_successfully
      generator:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
      - "8088:8088"
    environment:
      SPLUNK_VERSION: ${SPLUNK_VERSION}
      SPLUNK_HEC_TOKEN: "abcd1234"
      SPLUNK_HOSTNAME: splunk
      SPLUNK_HTTP_ENABLESSL: "true"
      SPLUNK_PASSWORD: Password.1234
      SPLUNK_STANDALONE_URL: https://splunk:8080
      SPLUNK_START_ARGS: --accept-license

  logstash:
    depends_on:
      splunk:
        condition: service_healthy
    image: logstash-oss:${LOGSTASH_OSS_VERSION}
    environment:
      LOGSTASH_OSS_VERSION: ${LOGSTASH_OSS_VERSION}
      LOG_LEVEL: info
      MONITORING_ENABLED: false
    volumes:
      - ../splunk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./certs/root-ca.pem:/usr/share/logstash/root-ca.pem
    command: logstash -f /usr/share/logstash/pipeline/indexer-to-splunk.conf

volumes:
  data:
